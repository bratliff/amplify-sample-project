.tab-set [role=tablist] button{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;border-radius:.1875em .1875em 0 0;height:2.5em}.tab-set [role=tablist] button+button{margin-left:.25em}.tab-set [role=tablist].tab-right{-ms-flex-pack:end;justify-content:flex-end}.tab-set [role=tablist].tab-left{-ms-flex-pack:start;justify-content:flex-start}.tab-set [role=tablist].tab-middle{-ms-flex-pack:center;justify-content:center}.tab-set.tab-box [role=tablist]{display:-ms-flexbox;display:flex;-ms-flex-flow:row;flex-flow:row}.tab-set.tab-box [role=tablist] button{display:table-cell;width:50%}.tab-set.tab-box [role=tablist] button div{display:inline-block}.tab-set.tab-box [role=tablist] button[aria-selected=true]{background:#fff;border:.0625em solid #bdbdbd;border-bottom:.0625em solid #fff;box-shadow:#fff 0 .0625em 0 0;pointer-events:none}.tab-set.tab-box [role=tablist] button:focus{box-shadow:0 0 0 .2rem #42bffe,#fff 0 .0625em 0 0}.tab-set.tab-box [role=tablist] button[aria-selected=false]{background:#bdbdbd}.tab-set.tab-box [role=tablist] button:hover{background:#e9e9e9;border-bottom-color:#e9e9e9;color:#9c0d63}.tab-set.tab-box [role=tabpanel]{background:#fff;border:.0625em solid #bdbdbd;border-radius:0 0 .1875em .1875em;padding:1.5em 2.5em}.tab-set.tab-box [role=tabpanel]:focus{box-shadow:0 0 0 .2rem #42bffe;outline:0}.tab-set.tab-head [role=tablist]{display:-ms-flexbox;display:flex;font-size:1.125em}.tab-set.tab-head [role=tablist] button{background:#f6f6f6;border:0;height:2.5em;line-height:2.5em;padding:0 1.0625em;min-width:11.25em}.tab-set.tab-head [role=tablist] button[aria-selected=true]{pointer-events:none}.tab-set.tab-head [role=tablist] button[aria-selected=false]{background-color:#bdbdbd;color:#676767}.tab-set.tab-head [role=tablist] button:hover{background:#e9e9e9;color:#9c0d63}@media (max-width:767.98px){.tab-set.tab-head [role=tablist]{margin-left:auto;margin-right:auto}.tab-set.tab-head [role=tablist] button{padding-left:.75em;padding-right:.75em}}.tab-set.tab-underline [role=tablist]{box-shadow:inset #e9e9e9 0 -.25em 0;display:-ms-flexbox;display:flex}.tab-set.tab-underline [role=tablist] button{background:0 0;border:0;margin-left:0;padding:0 1em}.tab-set.tab-underline [role=tablist] button:after{background-color:#9c0d63;bottom:0;content:'';display:block;height:.25em;left:0;position:absolute;width:100%}.tab-set.tab-underline [role=tablist] button[aria-selected=true]{pointer-events:none}.tab-set.tab-underline [role=tablist] button[aria-selected=false]{background-color:none;color:#676767}.tab-set.tab-underline [role=tablist] button[aria-selected=false] div{color:#676767}.tab-set.tab-underline [role=tablist] button[aria-selected=false]:after{background-color:#e9e9e9}.tab-set.tab-underline [role=tablist] button:hover{background-color:#e9e9e9;color:#9c0d63}.tab-set.tab-underline [role=tablist] button:hover div{color:#9c0d63}@media (max-width:767.98px){.tab-set.tab-underline [role=tablist]{margin-left:auto;margin-right:auto;width:100%}}.tab-orbit .uppercase{font-size:.875em;letter-spacing:.05em;text-transform:uppercase}.tab-orbit.tab-head [role=tablist] button{border-radius:0}.tab-orbit.tab-head [role=tablist] button:first-child{border-radius:1.25em 0 0 0}.tab-orbit.tab-head [role=tablist] button:last-child{border-radius:0 1.25em 0 0}.tab-orbit.tab-head [role=tablist] button div{background-color:#9c0d63;border-radius:100%;color:#fff;display:inline-block;line-height:1.875em;width:1.875em}.tab-orbit.tab-head [role=tablist] button[aria-selected=false] div{opacity:.5}.tab-orbit.tab-underline [role=tablist] button div{display:inline-block;font-size:1.5em;padding-right:.25em}.tab-orbit.tab-box{width:18.75em}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpcC9fbHdhbmctd2lwLnNjc3MiLCJhbXBsaWZ5L19taXhpbnMuc2NzcyIsInZlbmRvci9ib290c3RyYXA0L21peGlucy9fYnJlYWtwb2ludHMuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvQlEsOEIsQ0N3YUosZSxDQUNBLHNCLENBQ0Esa0IsQ0R0YVEsaUMsQ0FDQSxZLENBRUMscUMsQ0FDRyxpQixDQVZHLGlDLENBZVAsaUIsQ0FBQSx3QixDQWZPLGdDLENBbUJQLG1CLENBQUEsMEIsQ0FuQk8sa0MsQ0F1QlAsb0IsQ0FBQSxzQixDQVdXLCtCLENBQ1gsbUIsQ0FBQSxZLENBQ0EsaUIsQ0FBQSxhLENBRUEsc0MsQ0FDSSxrQixDQUNBLFMsQ0E5Q2hCLDBDLENBaURvQixvQixDQWpEcEIsMEQsQ0FxRG9CLGUsQ0FDQSw0QixDQUNBLGdDLENBQ0EsNkIsQ0FDQSxtQixDQXpEcEIsNEMsQ0E2RG9CLGlELENBN0RwQiwyRCxDQWlFb0Isa0IsQ0FqRXBCLDRDLENBcUVvQixrQixDQUNBLDJCLENBQ0EsYSxDQUtJLGdDLENBRVosZSxDQUNBLDRCLENBQ0EsaUMsQ0FDQSxtQixDQWpGWixzQyxDQXFGZ0IsOEIsQ0FDQSxTLENBYU8sZ0MsQ0FFWCxtQixDQUFBLFksQ0FDQSxpQixDQUVBLHVDLENBQ0ksa0IsQ0FDQSxRLENBQ0EsWSxDQUNBLGlCLENBQ0Esa0IsQ0FDQSxpQixDQU5KLDJELENBU1EsbUIsQ0FUUiw0RCxDQWFRLHdCLENBQ0EsYSxDQXRIcEIsNkMsQ0EwSG9CLGtCLENBQ0EsYSxDRTlEaEIsNEJGcUV1QixnQyxDQUNYLGdCLENBQ0EsaUIsQ0FwSWhCLHVDLENBdUlvQixrQixDQUNBLG1CLENFM0VoQixDRjdESixxQyxDQXNKWSxtQyxDQUNBLG1CLENBQUEsWSxDQUVBLDRDLENBQ0ksYyxDQUNBLFEsQ0FDQSxhLENBQ0EsYSxDQTdKaEIsa0QsQ0FnS29CLHdCLENBQ0EsUSxDQUNBLFUsQ0FDQSxhLENBQ0EsWSxDQUNBLE0sQ0FDQSxpQixDQUNBLFUsQ0F2S3BCLGdFLENBMktvQixtQixDQTNLcEIsaUUsQ0ErS29CLHFCLENBQ0EsYSxDQUVBLHFFLENBQ0ksYSxDQW5MeEIsdUUsQ0F1THdCLHdCLENBdkx4QixrRCxDQTRMb0Isd0IsQ0FDQSxhLENBRUEsc0QsQ0FDSSxhLENFbklwQiw0QkYwSXVCLHFDLENBQ1gsZ0IsQ0FDQSxpQixDQUNBLFUsQ0U3SVosQ0ZzSkoscUIsQ0FNUSxnQixDQUNBLG9CLENBQ0Esd0IsQ0FSUix5QyxDQXNCZ0IsZSxDQXRCaEIscUQsQ0F5Qm9CLDBCLENBSlIsb0QsQ0FRUSwwQixDQUdKLDZDLENBQ0ksd0IsQ0FDQSxrQixDQUNBLFUsQ0FDQSxvQixDQUNBLG1CLENBQ0EsYSxDQUtBLGtFLENBQ0ksVSxDQWdCUixrRCxDQUNJLG9CLENBQ0EsZSxDQUNBLG1CLENBL0RwQixrQixDQXNFUSxhIiwiZmlsZSI6IndpcC1sd2FuZy5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gTGF1cmVuJ3MgZXhwZXJpbWVudHMgYW5kIHdvcmtzLWluLXByb2dyZXNzXG4vLyAoTm90IGxpbnRlZClcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRhYiBOYXZpZ2F0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cblxuLnRhYi1zZXQge1xuXG4gICAgJGhpZ2hsaWdodC1jb2xvcjogJHByaW1hcnk7XG4gICAgJHRhYi1oZWlnaHQ6ICRidG4taW5wdXQtaGVpZ2h0O1xuICAgICR0YWItaG92ZXItY29sb3I6ICRncmF5LTI7XG5cbiAgICBbcm9sZT0ndGFibGlzdCddIHtcblxuICAgICAgICBidXR0b24geyAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEBpbmNsdWRlIHRydW5jYXRlKCk7XG5cbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzICRib3JkZXItcmFkaXVzIDAgMDtcbiAgICAgICAgICAgIGhlaWdodDogJHRhYi1oZWlnaHQ7XG5cbiAgICAgICAgICAgICtidXR0b24ge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAkZW0tc3BhY2UteHhzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJi50YWItcmlnaHQge1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgfVxuXG4gICAgICAgICYudGFiLWxlZnQge1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgJi50YWItbWlkZGxlIHtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJi50YWItYm94IHtcblxuICAgICAgICAkdGFiLWFjdGl2ZS1jb2xvcjogJHdoaXRlO1xuICAgICAgICAkdGFiLW91dGxpbmUtY29sb3I6ICRncmF5LTM7XG4gICAgICAgICRzdHJva2UtcHg6IDFweDtcbiAgICAgICAgJHN0cm9rZS1lbXM6IGVteSgkc3Ryb2tlLXB4KTtcblxuICAgICAgICBbcm9sZT0ndGFibGlzdCddIHsgIFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZsZXgtZmxvdzogcm93O1xuXG4gICAgICAgICAgICBidXR0b24geyBcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xuICAgICAgICAgICAgICAgIHdpZHRoOiA1MCU7XG5cbiAgICAgICAgICAgICAgICBkaXYge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJlthcmlhLXNlbGVjdGVkPSd0cnVlJ10ge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkdGFiLWFjdGl2ZS1jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAkc3Ryb2tlLWVtcyBzb2xpZCAkdGFiLW91dGxpbmUtY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b206ICRzdHJva2UtZW1zIHNvbGlkICR0YWItYWN0aXZlLWNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAkdGFiLWFjdGl2ZS1jb2xvciAwICRzdHJva2UtZW1zIDAgMDtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJjpmb2N1cyB7XG4gICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6ICRpbnB1dC1idG4tZm9jdXMtYm94LXNoYWRvdywgJHRhYi1hY3RpdmUtY29sb3IgMCAkc3Ryb2tlLWVtcyAwIDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJlthcmlhLXNlbGVjdGVkPSdmYWxzZSddIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHRhYi1vdXRsaW5lLWNvbG9yO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkdGFiLWhvdmVyLWNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiAkdGFiLWhvdmVyLWNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJGhpZ2hsaWdodC1jb2xvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBbcm9sZT0ndGFicGFuZWwnXSB7XG5cbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR0YWItYWN0aXZlLWNvbG9yO1xuICAgICAgICAgICAgYm9yZGVyOiAkc3Ryb2tlLWVtcyBzb2xpZCAkdGFiLW91dGxpbmUtY29sb3I7ICAgXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwIDAgJGJvcmRlci1yYWRpdXMgJGJvcmRlci1yYWRpdXM7XG4gICAgICAgICAgICBwYWRkaW5nOiAkZW0tc3BhY2UtbCAkZW0tc3BhY2UteHhsO1xuXG4gICAgICAgICAgICAmOmZvY3VzIHtcblxuICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6ICRpbnB1dC1idG4tZm9jdXMtYm94LXNoYWRvdztcbiAgICAgICAgICAgICAgICBvdXRsaW5lOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgJi50YWItaGVhZCB7XG5cbiAgICAgICAgJGZvbnQtc2l6ZS1weDogMThweDtcbiAgICAgICAgJGZvbnQtc2l6ZS1lbXM6IGVteSgkZm9udC1zaXplLXB4KTtcblxuICAgICAgICAkdGFiLXdpZHRoLXB4OiAxODBweDtcbiAgICAgICAgJHRhYi13aWR0aC1lbXM6IGVteSgkdGFiLXdpZHRoLXB4KTtcblxuICAgICAgICBbcm9sZT0ndGFibGlzdCddIHsgXG5cbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmb250LXNpemU6ICRmb250LXNpemUtZW1zO1xuXG4gICAgICAgICAgICBidXR0b24geyBcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkZ3JheS0xO1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICR0YWItaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAkdGFiLWhlaWdodDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwICRidG4taW5wdXQteC1wYWRkaW5nO1xuICAgICAgICAgICAgICAgIG1pbi13aWR0aDogJHRhYi13aWR0aC1lbXM7XG5cbiAgICAgICAgICAgICAgICAmW2FyaWEtc2VsZWN0ZWQ9J3RydWUnXSB7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICZbYXJpYS1zZWxlY3RlZD0nZmFsc2UnXSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRncmF5LTM7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkdGV4dC1jb2xvci1saWdodDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHRhYi1ob3Zlci1jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC1kb3duKHNtKSB7XG5cbiAgICAgICAgICAgIFtyb2xlPSd0YWJsaXN0J10ge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcblxuICAgICAgICAgICAgICAgIGJ1dHRvbiB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogJGVtLXNwYWNlLXM7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6ICRlbS1zcGFjZS1zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgICYudGFiLXVuZGVybGluZSB7XG5cbiAgICAgICAgJHRhYi13aWR0aC1weDogMTgwcHg7XG4gICAgICAgICR0YWItd2lkdGgtZW1zOiBlbXkoJHRhYi13aWR0aC1weCk7XG4gICAgICAgICR0YWItdW5kZXJsaW5lLWNvbG9yOiAkZ3JheS0yO1xuXG4gICAgICAgIFtyb2xlPSd0YWJsaXN0J10geyBcblxuICAgICAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgJHRhYi11bmRlcmxpbmUtY29sb3IgMCAkZW0tc3BhY2UteHhzKi0xIDA7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuXG4gICAgICAgICAgICBidXR0b24geyBcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMDsgLy8gT3ZlcnJpZGUgZGVmYXVsdFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAgJGVtLXNwYWNlO1xuXG4gICAgICAgICAgICAgICAgJjphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICRlbS1zcGFjZS14eHM7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJlthcmlhLXNlbGVjdGVkPSd0cnVlJ10ge1xuICAgICAgICAgICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAmW2FyaWEtc2VsZWN0ZWQ9J2ZhbHNlJ10ge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHRleHQtY29sb3ItbGlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgZGl2IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkdGV4dC1jb2xvci1saWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICY6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHRhYi11bmRlcmxpbmUtY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHRhYi1ob3Zlci1jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XG5cbiAgICAgICAgICAgICAgICAgICAgZGl2IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkaGlnaGxpZ2h0LWNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC1kb3duKHNtKSB7XG4gICAgICAgICAgICBbcm9sZT0ndGFibGlzdCddIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuXG5cbi50YWItb3JiaXQge1xuXG4gICAgLnVwcGVyY2FzZSB7XG5cbiAgICAgICAgJHVwcGVyY2FzZS1mb250LXNpemUtZW1zOiBlbXkoJGZvbnQtc2l6ZS1iYXNlLXB4IC0gMnB4KTtcblxuICAgICAgICBmb250LXNpemU6ICR1cHBlcmNhc2UtZm9udC1zaXplLWVtczsgXG4gICAgICAgIGxldHRlci1zcGFjaW5nOiAwLjA1ZW07XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgfVxuXG4gICAgJi50YWItaGVhZCB7XG5cbiAgICAgICAgJHRhYi1ub3RpZmljYXRpb24tc2l6ZS1weDogMzBweDtcbiAgICAgICAgJHRhYi1ub3RpZmljYXRpb24tc2l6ZS1lbXM6IGVteSgkdGFiLW5vdGlmaWNhdGlvbi1zaXplLXB4KTtcblxuICAgICAgICAkYm9yZGVyLXJhZGl1cy1weDogMjBweDtcbiAgICAgICAgJGJvcmRlci1yYWRpdXMtZW1zOiBlbXkoJGJvcmRlci1yYWRpdXMtcHgpO1xuXG4gICAgICAgIFtyb2xlPSd0YWJsaXN0J10geyBcblxuICAgICAgICAgICAgYnV0dG9uIHsgXG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcblxuICAgICAgICAgICAgICAgICY6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cy1lbXMgMCAwIDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMCAkYm9yZGVyLXJhZGl1cy1lbXMgMCAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRpdiB7IC8vY2lyY2xlIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpbWFyeTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR3aGl0ZTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogJHRhYi1ub3RpZmljYXRpb24tc2l6ZS1lbXM7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAkdGFiLW5vdGlmaWNhdGlvbi1zaXplLWVtcztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAmW2FyaWEtc2VsZWN0ZWQ9J2ZhbHNlJ10ge1xuXG4gICAgICAgICAgICAgICAgICAgIGRpdiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAuNTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgICYudGFiLXVuZGVybGluZSB7XG5cbiAgICAgICAgJGZvbnQtc2l6ZS1weDogMjRweDtcbiAgICAgICAgJGZvbnQtc2l6ZS1lbXM6IGVteSgkZm9udC1zaXplLXB4KTtcblxuICAgICAgICBbcm9sZT0ndGFibGlzdCddIHsgXG5cbiAgICAgICAgICAgIGJ1dHRvbiB7IFxuXG4gICAgICAgICAgICAgICAgZGl2IHsgLy8gYmlnIG51bWJlclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJGZvbnQtc2l6ZS1lbXM7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6ICRlbS1zcGFjZS14eHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgJi50YWItYm94IHtcbiAgICAgICAgd2lkdGg6IGVteSgzMDBweCk7IC8vcGxhY2Vob2xkZXJcblxuICAgIH1cbn1cbiIsIi8vIHNhc3MtbGludDpkaXNhYmxlIG5vLWNvbG9yLWxpdGVyYWxzXG5cblxuLy8gQnV0dG9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gQXJndW1lbnRzOlxuLy8gMS4gRm9udCBjb2xvclxuLy8gMi4gRm9udCBjb2xvciA6aG92ZXJcbi8vIDMuIEJhY2tncm91bmQgY29sb3Jcbi8vIDQuIEJhY2tncm91bmQgY29sb3IgOmhvdmVyXG4vLyA1LiBCb3JkZXIgY29sb3Jcbi8vIDYuIEJvcmRlciBjb2xvciA6aG92ZXJcblxuQG1peGluIGJ0bi1hbXBsaWZ5KCRmb250LWNvbG9yOiAkd2hpdGUsICRmb250LWNvbG9yLWhvdmVyOiAkd2hpdGUsICRiYWNrZ3JvdW5kOiAkcHJpbWFyeSwgJGJhY2tncm91bmQtaG92ZXI6ICRwcmltYXJ5LWRhcmtlciwgJGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQsICRib3JkZXItY29sb3ItaG92ZXI6IHRyYW5zcGFyZW50KSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQ7XG4gICAgYm9yZGVyLWNvbG9yOiAkYm9yZGVyLWNvbG9yO1xuICAgIGNvbG9yOiAkZm9udC1jb2xvcjtcbiAgICAvLyB0ZXh0LXNoYWRvdzogMCAxcHggMCByZ2JhKCRibGFjaywgMC4zKSwgMCAwIDJweCByZ2JhKCRibGFjaywgMC4yKTsgLy8gTWF5IGJlIHVzZWZ1bCBpbiB0aGUgZnV0dXJlXG5cbiAgICAmOmZvY3VzLFxuICAgICY6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZC1ob3ZlcjtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAkYm9yZGVyLWNvbG9yLWhvdmVyO1xuICAgICAgICBjb2xvcjogJGZvbnQtY29sb3ItaG92ZXI7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgfVxuXG4gICAgJjphY3RpdmUsXG4gICAgJi5hY3RpdmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZW4oJGJhY2tncm91bmQtaG92ZXIsIDEwJSk7XG4gICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgfVxufVxuXG4vLyBGcm9tIHRhcmdldCBoZWlnaHQsIGRlcml2ZSBmb250LXNpemUgYW5kIGxpbmUgaGVpZ2h0XG5AbWl4aW4gYnRuLWZpeGVkLWhlaWdodCgkaGVpZ2h0KSB7XG4gICAgJGhlaWdodC1yZW1zOiByZW15KCRoZWlnaHQpOyAvLyBSZW1zIGJlY2F1c2Ugd2Ugd2FudCB0aGUgc2l6ZSB0byBiZSBpbmRlcGVuZGVudCBvZiBjb250ZXh0XG4gICAgJGZvbnQtc2l6ZS1yZW1zOiAkaGVpZ2h0LXJlbXMgKiAkYnRuLWlucHV0LWZvbnQtc2l6ZS1yYXRpbztcbiAgICAkYm9yZGVyLXdpZHRoLXRvdGFsOiAoJGhlaWdodC1yZW1zICogJGJ0bi1pbnB1dC1oZWlnaHQtYm9yZGVyLXJhdGlvKSAqIDI7XG5cbiAgICBmb250LXNpemU6ICRmb250LXNpemUtcmVtcztcbiAgICBoZWlnaHQ6ICRoZWlnaHQtcmVtcztcbiAgICBsaW5lLWhlaWdodDogJGhlaWdodC1yZW1zIC0gJGJvcmRlci13aWR0aC10b3RhbDsgLy8gQWRqdXN0ZWQgZm9yIGJvcmRlciB0aGlja25lc3Ncbn1cblxuXG4vLyBEaXNhYmxlZCBTdGF0ZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQG1peGluIGRpc2FibGVkLXN0YXRlKCRvcGFjaXR5KSB7XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICAgIG9wYWNpdHk6ICRvcGFjaXR5O1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG5cbi8vIFNoYWRvd3Ncbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIE1peGluIGxpZnRlZCBmcm9tIGh0dHBzOi8vY29kZXBlbi5pby9kYm94L3Blbi9SYXdCRVdcblxuLy8tIE1peGluOiBNYXRlcmlhbCBTaGFkb3dcbi8vL1xuLy8vIEJveCBzaGFkb3dzIGJhc2VkIG9uIDUgTWF0ZXJpYWwgRGVzaWduIHByZXNldHM7XG4vLy9cbi8vLyBAcGFyYW0ge3ZhcmlhYmxlfSAkei1kZXB0aCBbMV0gLSBzaGFkb3cgZGlzdGFuY2Ugb24gei1heGlzXG4vLy8gQHBhcmFtIHt2YXJpYWJsZX0gJHN0cmVuZ3RoIFsxXSAtIG11bHRpcGxpZXIgZm9yIHNoYWRvdyBzdHJlbmd0aC9kYXJrbmVzc1xuLy8vIEBwYXJhbSB7dmFyaWFibGV9ICRjb2xvciBbMV0gLSBzaGFkb3cgY29sb3Jcbi8vLyBAZ3JvdXAgbGF5b3V0XG4vLy8gQGV4YW1wbGVcbi8vLyAgIGRpdiB7XG4vLy8gICAgIEBpbmNsdWRlIG1hdGVyaWFsLXNoYWRvdygzKTtcbi8vLyAgIH1cblxuQG1peGluIG1hdGVyaWFsLXNoYWRvdygkei1kZXB0aDogMSwgJHN0cmVuZ3RoOiAxLCAkY29sb3I6ICRibGFjaykge1xuICAgIEBpZiAkei1kZXB0aD09MSB7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMXB4IDNweCByZ2JhKCRjb2xvciwgJHN0cmVuZ3RoICogMC4xNCksIDAgMXB4IDJweCByZ2JhKCRjb2xvciwgJHN0cmVuZ3RoICogMC4yNCk7XG4gICAgfVxuICAgIEBpZiAkei1kZXB0aD09MiB7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgM3B4IDZweCByZ2JhKCRjb2xvciwgJHN0cmVuZ3RoICogMC4xNiksIDAgM3B4IDZweCByZ2JhKCRjb2xvciwgJHN0cmVuZ3RoICogMC4yMyk7XG4gICAgfVxuICAgIEBpZiAkei1kZXB0aD09MyB7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMTBweCAyMHB4IHJnYmEoJGNvbG9yLCAkc3RyZW5ndGggKiAwLjE5KSwgMCA2cHggNnB4IHJnYmEoJGNvbG9yLCAkc3RyZW5ndGggKiAwLjIzKTtcbiAgICB9XG4gICAgQGlmICR6LWRlcHRoPT00IHtcbiAgICAgICAgYm94LXNoYWRvdzogMCAxNXB4IDMwcHggcmdiYSgkY29sb3IsICRzdHJlbmd0aCAqIDAuMjUpLCAwIDEwcHggMTBweCByZ2JhKCRjb2xvciwgJHN0cmVuZ3RoICogMC4yMik7XG4gICAgfVxuICAgIEBpZiAkei1kZXB0aD09NSB7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMjBweCA0MHB4IHJnYmEoJGNvbG9yLCAkc3RyZW5ndGggKiAwLjMpLCAwIDE1cHggMTJweCByZ2JhKCRjb2xvciwgJHN0cmVuZ3RoICogMC4yMik7XG4gICAgfVxuICAgIEBpZiAoJHotZGVwdGggPCAxKSBvciAoJHotZGVwdGggPiA1KSB7XG4gICAgICAgIEB3YXJuICckei1kZXB0aCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNSc7XG4gICAgfVxufVxuXG5cbi8vIENlbnRlcmluZ1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gTWV0aG9kIG9mIGNlbnRlcmluZ1xuLy8gUmVxdWlyZXMgd2lkdGggYW5kIGhlaWdodCBhcmd1bWVudHNcbkBtaXhpbiBhYnNvbHV0ZS1jZW50ZXIoJHdpZHRoLCAkaGVpZ2h0KSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgaGVpZ2h0OiAkaGVpZ2h0O1xuICAgIGxlZnQ6IDUwJTtcbiAgICBtYXJnaW4tbGVmdDogLSgkd2lkdGggLyAyKTtcbiAgICBtYXJnaW4tdG9wOiAtKCRoZWlnaHQgLyAyKTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA1MCU7XG4gICAgd2lkdGg6ICR3aWR0aDtcbn1cblxuQG1peGluIGhvcml6b250YWwtY2VudGVyKCR3aWR0aCkge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGxlZnQ6IDUwJTtcbiAgICBtYXJnaW4tbGVmdDogLSgkd2lkdGggLyAyKTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6ICR3aWR0aDtcbn1cblxuLy8gRWFzaWVyIG1ldGhvZCBvZiBjZW50ZXJpbmdcbi8vIERvbid0IHVzZSBkaXJlY3RseSBvbiBTVkdzIGJlY2F1c2UgaXQgbWFrZXMgdGhlbSBicmVhayBpbiBzb21lIGJyb3dzZXJzXG5AbWl4aW4gdHJhbnNsYXRlLWNlbnRlcigpIHtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdG9wOiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG59XG5cbkBtaXhpbiB0cmFuc2xhdGUteS1jZW50ZXIoKSB7XG4gICAgdG9wOiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xufVxuXG5AbWl4aW4gdHJhbnNsYXRlLXgtY2VudGVyKCkge1xuICAgIGxlZnQ6IDUwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG59XG5cblxuLy8gRm9ybSBFbGVtZW50c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gQ3VzdG9tIENoZWNrYm94XG5AbWl4aW4gYW1wbGlmeS1jaGVja2JveCgkYm9yZGVyLWNvbG9yLCAkYm9yZGVyLWNvbG9yLWhvdmVyLCAkYmFja2dyb3VuZC1jb2xvciwgJGJhY2tncm91bmQtY29sb3ItY2hlY2tlZCwgJGNoZWNrYm94LXNpemUsICRjaGVja21hcmstY29sb3IsICRib3JkZXItcmFkaXVzLCAkYm9yZGVyLXRoaWNrbmVzcykge1xuXG4gICAgLy8gVGhlIGxhYmVsIGlzIHRoZSBjbGlja2FibGUgZWxlbWVudFxuICAgIGxhYmVsIHtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBtYXJnaW46IDA7IC8vIE92ZXJyaWRlIEJvb3RzdHJhcCBkZWZhdWx0XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG5cbiAgICAgICAgJjpob3ZlcixcbiAgICAgICAgJjpmb2N1cyB7XG5cbiAgICAgICAgICAgIGlucHV0IHtcblxuICAgICAgICAgICAgICAgICY6bm90KDpjaGVja2VkKSArIGRpdiB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogJGJvcmRlci10aGlja25lc3Mgc29saWQgJGJvcmRlci1jb2xvci1ob3ZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbnB1dCB7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgb3BhY2l0eTogMDsgLy8gaGlkZSB0aGUgaW5wdXRcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOyAvLyB0YWtlIGl0IG91dCBvZiB0aGUgZG9jdW1lbnQgZmxvd1xuXG4gICAgICAgIC8vIFRoZSBjaGVja2JveFxuICAgICAgICArIC5jaGVja2JveC1kaXYge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtY29sb3I7XG4gICAgICAgICAgICBib3JkZXI6ICRib3JkZXItdGhpY2tuZXNzIHNvbGlkICRib3JkZXItY29sb3I7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cztcbiAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICAgICAgaGVpZ2h0OiAkY2hlY2tib3gtc2l6ZTtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogJGVtLXNwYWNlLXM7XG4gICAgICAgICAgICB3aWR0aDogJGNoZWNrYm94LXNpemU7XG4gICAgICAgIH1cblxuICAgICAgICAmOmNoZWNrZWQgKyBkaXYge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtY29sb3ItY2hlY2tlZDtcblxuICAgICAgICAgICAgLy8gVGhlIGNoZWNrIG1hcmtcbiAgICAgICAgICAgIC8vIEJhc2VkIG9uIHRoaXMgc3ZnOiAvc3JjL2Fzc2V0cy90b29sa2l0L3N2Zy9jZmVyL2ljb24tMjBweC1jaGVja2JveC1jaGVjay5zdmdcbiAgICAgICAgICAgIC8vIFVSSSBnZW5lcmF0ZWQgdXNpbmcgdGhpcyB0b29sOiBodHRwczovL2NvZGVwZW4uaW8vdG9tbWllaGFuc2VuL3Blbi9SYVhaeldcbiAgICAgICAgICAgIC8vIEludGVycG9sYXRlZCB2YXJpYWJsZSBmb3IgZmlsbCBjb2xvciBpcyBpbiB0aGUgZm9ybWF0ICcje3VybC1mcmllbmRseS1jb2xvdXIoJHZhcmlhYmxlKX0nXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGY4LCUzQ3N2ZyUyMHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclMjB2aWV3Qm94PScwJTIwMCUyMDIwJTIwMjAnJTNFJTNDcGF0aCUyMGZpbGw9JyN7dXJsLWZyaWVuZGx5LWNvbG91cigkY2hlY2ttYXJrLWNvbG9yKX0nJTIwZD0nTTcuODglMjAxNC45MWwtMy45MS00LjA1JTIwMS40NC0xLjM5JTIwMi40NyUyMDIuNTYlMjA2LjcxLTYuOTQlMjAxLjQ0JTIwMS4zOS04LjE1JTIwOC40MycvJTNFJTNDL3N2ZyUzRVwiKTsgLy8gc2Fzcy1saW50OmRpc2FibGUtbGluZSBxdW90ZXNcbiAgICAgICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgfVxuXG4gICAgICAgICY6Zm9jdXMge1xuXG4gICAgICAgICAgICArIC5jaGVja2JveC1kaXYge1xuICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSAkaW5wdXQtYnRuLWZvY3VzLWNvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBDaGVja2JveCB3aXRoIGRhc2ggaW5kaWNhdGluZyBwYXJ0aWFsIHNlbGVjdGlvbiBzdGF0ZSwgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIEBtaXhpbiBhbXBsaWZ5LWNoZWNrYm94XG5AbWl4aW4gYW1wbGlmeS1jaGVja2JveC1wYXJ0aWFsKCRkYXNoLWNvbG9yKSB7XG5cbiAgICBpbnB1dCB7XG4gICAgICAgICY6Y2hlY2tlZCArIGRpdiB7XG5cbiAgICAgICAgICAgIC8vIFRoZSBkYXNoXG4gICAgICAgICAgICAvLyBCYXNlZCBvbiB0aGlzIHN2ZzogL3NyYy9hc3NldHMvdG9vbGtpdC9zdmcvY2Zlci9pY29uLTIwcHgtY2hlY2tib3gtZGFzaC5zdmdcbiAgICAgICAgICAgIC8vIFVSSSBnZW5lcmF0ZWQgdXNpbmcgdGhpcyB0b29sOiBodHRwczovL2NvZGVwZW4uaW8vdG9tbWllaGFuc2VuL3Blbi9SYVhaeldcbiAgICAgICAgICAgIC8vIEludGVycG9sYXRlZCB2YXJpYWJsZSBmb3IgZmlsbCBjb2xvciBpcyBpbiB0aGUgZm9ybWF0ICcje3VybC1mcmllbmRseS1jb2xvdXIoJHZhcmlhYmxlKX0nXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGY4LCUzQ3N2ZyUyMHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclMjB2aWV3Qm94PScwJTIwMCUyMDIwJTIwMjAnJTNFJTNDcGF0aCUyMGZpbGw9JyN7dXJsLWZyaWVuZGx5LWNvbG91cigkZGFzaC1jb2xvcil9JyUyMGQ9J000JTIwOWgxMnYySDR6Jy8lM0UlM0Mvc3ZnJTNFXCIpOyAvLyBzYXNzLWxpbnQ6ZGlzYWJsZS1saW5lIHF1b3Rlc1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBDaGVja2JveCB3aXRoIGRlbGV0ZSBzZWxlY3Rpb24gc3RhdGUsIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBAbWl4aW4gYW1wbGlmeS1jaGVja2JveFxuQG1peGluIGFtcGxpZnktY2hlY2tib3gtZGVsZXRlKCRkYXNoLWNvbG9yKSB7XG5cbiAgICBpbnB1dCB7XG4gICAgICAgICY6Y2hlY2tlZCArIGRpdiB7XG5cbiAgICAgICAgICAgIC8vIFRoZSBkYXNoXG4gICAgICAgICAgICAvLyBCYXNlZCBvbiB0aGlzIHN2ZzogL3NyYy9hc3NldHMvdG9vbGtpdC9zdmcvY2Zlci9pY29uLTI0cHgtY2hlY2tib3gteC5zdmdcbiAgICAgICAgICAgIC8vIFVSSSBnZW5lcmF0ZWQgdXNpbmcgdGhpcyB0b29sOiBodHRwczovL2NvZGVwZW4uaW8vdG9tbWllaGFuc2VuL3Blbi9SYVhaeldcbiAgICAgICAgICAgIC8vIEludGVycG9sYXRlZCB2YXJpYWJsZSBmb3IgZmlsbCBjb2xvciBpcyBpbiB0aGUgZm9ybWF0ICcje3VybC1mcmllbmRseS1jb2xvdXIoJHZhcmlhYmxlKX0nXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbWVzc2FnaW5nLXJlZDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnJTIweG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUyMHZpZXdCb3g9JzAlMjAwJTIwMjAlMjAyMCclM0UlM0NwYXRoJTIwZmlsbD0nI3t1cmwtZnJpZW5kbHktY29sb3VyKCRkYXNoLWNvbG9yKX0nJTIwZD0nTTE2JTIwNS4yTDExLjIlMjAxMGw0LjglMjA0LjgtMS4yJTIwMS4yLTQuOC00LjhMNS4yJTIwMTYlMjA0JTIwMTQuOCUyMDguOCUyMDEwJTIwNCUyMDUuMiUyMDUuMiUyMDQlMjAxMCUyMDguOCUyMDE0LjglMjA0JTIwMTYlMjA1LjJ6Jy8lM0UlM0Mvc3ZnJTNFXCIpOyAvLyBzYXNzLWxpbnQ6ZGlzYWJsZS1saW5lIHF1b3Rlc1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8vIEN1c3RvbSByYWRpbyBidXR0b25cblxuLy8gTWl4aW4gYXJndW1lbnRzOlxuLy8gMS4gcmFkaW8gYnRuIHNpemVcbi8vIDIuIGRvdCBjb2xvclxuLy8gMy4gYm9yZGVyIGNvbG9yXG4vLyA0LiBib3JkZXIgdGhpY2tuZXNzXG4vLyA1LiBib3JkZXIgaG92ZXIgY29sb3Jcbi8vIDYuIGJhY2tncm91bmQgY29sb3JcblxuQG1peGluIGFtcGxpZnktcmFkaW8tYnRuKCRyYWRpby1idG4tc2l6ZSwgJGRvdC1jb2xvciwgJGJvcmRlci1jb2xvciwgJGJvcmRlci10aGlja25lc3MsICRib3JkZXItaG92ZXItY29sb3IsICRiYWNrZ3JvdW5kLWNvbG9yKSB7XG5cbiAgICAkZG90LXNpemU6ICRyYWRpby1idG4tc2l6ZSAqIC40NTtcblxuICAgIC8vIFRoZSBsYWJlbCBpcyB0aGUgY2xpY2thYmxlIGVsZW1lbnRcbiAgICBsYWJlbCB7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgbGluZS1oZWlnaHQ6ICRyYWRpby1idG4tc2l6ZTtcbiAgICAgICAgbWFyZ2luOiAwOyAvLyBPdmVycmlkZSBCb290c3RyYXAgZGVmYXVsdFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICAgICAgICY6aG92ZXIsXG4gICAgICAgICY6Zm9jdXMge1xuXG4gICAgICAgICAgICBpbnB1dCB7XG5cbiAgICAgICAgICAgICAgICAmICsgZGl2IHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAkYm9yZGVyLXRoaWNrbmVzcyBzb2xpZCAkYm9yZGVyLWhvdmVyLWNvbG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlucHV0IHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBvcGFjaXR5OiAwOyAvLyBoaWRlIHRoZSBpbnB1dFxuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7IC8vIHRha2UgaXQgb3V0IG9mIHRoZSBkb2N1bWVudCBmbG93XG5cbiAgICAgICAgLy8gVGhlIHZpc2libGUgZGl2IG5leHQgdG8gdGhlIGlucHV0XG5cbiAgICAgICAgKyAucmFkaW8tZGl2IHtcbiAgICAgICAgICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZC1jb2xvcjtcbiAgICAgICAgICAgIGJvcmRlcjogJGJvcmRlci10aGlja25lc3Mgc29saWQgJGJvcmRlci1jb2xvcjtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbG9hdDogbGVmdDtcbiAgICAgICAgICAgIGhlaWdodDogJHJhZGlvLWJ0bi1zaXplO1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6ICRlbS1zcGFjZS1zO1xuICAgICAgICAgICAgd2lkdGg6ICRyYWRpby1idG4tc2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgICY6Y2hlY2tlZCArIGRpdiB7XG5cbiAgICAgICAgICAgICY6YWZ0ZXIge1xuICAgICAgICAgICAgICAgIEBpbmNsdWRlIHRyYW5zbGF0ZS15LWNlbnRlcigpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRkb3QtY29sb3I7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAwO1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICRkb3Qtc2l6ZTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgd2lkdGg6ICRkb3Qtc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICY6Zm9jdXMge1xuXG4gICAgICAgICAgICArIC5yYWRpby1kaXYge1xuICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6ICRpbnB1dC1idG4tZm9jdXMtYm94LXNoYWRvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gQSBtaXhpbiBmb3IgdGhlIGFycm93IHRoYXQgYXBwZWFycyBpbiBidXR0b25zIC8gbGlua3Ncbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gbWVudWFycm93KCkge1xuXG4gICAgJjo6YWZ0ZXIge1xuICAgICAgICBAaW5jbHVkZSB0cmFuc2xhdGUteS1jZW50ZXIoKTtcblxuICAgICAgICAvLyBUaGUgZG93biBhcnJvd1xuICAgICAgICAvLyBCYXNlZCBvbiB0aGlzIHN2ZzogL3NyYy9hc3NldHMvdG9vbGtpdC9zdmcvY2Zlci9pY29uLTI0cHgtZHJvcGRvd24tYXJyb3cuc3ZnXG4gICAgICAgIC8vIFVSSSBnZW5lcmF0ZWQgdXNpbmcgdGhpcyB0b29sOiBodHRwczovL2NvZGVwZW4uaW8vdG9tbWllaGFuc2VuL3Blbi9SYVhaeldcbiAgICAgICAgLy8gSW50ZXJwb2xhdGVkIHZhcmlhYmxlIGZvciBmaWxsIGNvbG9yIGlzIGluIHRoZSBmb3JtYXQgJyN7dXJsLWZyaWVuZGx5LWNvbG91cigkdmFyaWFibGUpfSdcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0NzdmclMjB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTIwdmlld0JveD0nMCUyMDAlMjAyNCUyMDI0JyUzRSUzQ3BhdGglMjBmaWxsPScje3VybC1mcmllbmRseS1jb2xvdXIoJGFycm93LWNvbG9yKX0nJTIwZD0nTTclMjAxMGgxMGwtNSUyMDV6Jy8lM0UlM0Mvc3ZnJTNFXCIpOyAvLyBzYXNzLWxpbnQ6ZGlzYWJsZS1saW5lIHF1b3Rlc1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIH1cbn1cblxuXG4vLyBEcm9wZG93biBNZW51XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5AbWl4aW4gZHJvcGRvd24tbWVudSgkYm9yZGVyLWNvbG9yLCAkaG92ZXItY29sb3IsICRzaGFkb3csICRib3JkZXItcmFkaXVzLCAkZm9udC1mYW1pbHksICRmb250LXNpemUsICRsaW5lLWhlaWdodCwgJGFycm93LWNvbG9yKSB7XG5cbiAgICB1bCB7XG4gICAgICAgIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJGJvcmRlci1jb2xvcjtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJGJvcmRlci1yYWRpdXM7XG4gICAgICAgIGJveC1zaGFkb3c6ICRzaGFkb3c7XG4gICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICBmb250LWZhbWlseTogJGZvbnQtZmFtaWx5O1xuICAgICAgICBmb250LXNpemU6ICRmb250LXNpemU7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQ7XG4gICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgICAgei1pbmRleDogMTAwMDtcblxuICAgICAgICAmOmZvY3VzIHtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgIH1cblxuICAgICAgICBsaSB7XG5cbiAgICAgICAgICAgICY6bm90KC52YW1wLXNlbGVjdC1ncm91cCkge1xuXG4gICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRob3Zlci1jb2xvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICY6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA3cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICA+IGJ1dHRvbiB7XG4gICAgICAgICY6OmFmdGVyIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHRyYW5zbGF0ZS15LWNlbnRlcigpO1xuXG4gICAgICAgICAgICAvLyBUaGUgZG93biBhcnJvd1xuICAgICAgICAgICAgLy8gQmFzZWQgb24gdGhpcyBzdmc6IC9zcmMvYXNzZXRzL3Rvb2xraXQvc3ZnL2NmZXIvaWNvbi0yNHB4LWRyb3Bkb3duLWFycm93LnN2Z1xuICAgICAgICAgICAgLy8gVVJJIGdlbmVyYXRlZCB1c2luZyB0aGlzIHRvb2w6IGh0dHBzOi8vY29kZXBlbi5pby90b21taWVoYW5zZW4vcGVuL1JhWFp6V1xuICAgICAgICAgICAgLy8gSW50ZXJwb2xhdGVkIHZhcmlhYmxlIGZvciBmaWxsIGNvbG9yIGlzIGluIHRoZSBmb3JtYXQgJyN7dXJsLWZyaWVuZGx5LWNvbG91cigkdmFyaWFibGUpfSdcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnJTIweG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUyMHZpZXdCb3g9JzAlMjAwJTIwMjQlMjAyNCclM0UlM0NwYXRoJTIwZmlsbD0nI3t1cmwtZnJpZW5kbHktY29sb3VyKCRhcnJvdy1jb2xvcil9JyUyMGQ9J003JTIwMTBoMTBsLTUlMjA1eicvJTNFJTNDL3N2ZyUzRVwiKTsgLy8gc2Fzcy1saW50OmRpc2FibGUtbGluZSBxdW90ZXNcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJi5vcGVuIHtcblxuICAgICAgICA+IGJ1dHRvbiB7XG5cbiAgICAgICAgICAgICY6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAvL21hcmdpbi10b3A6IC0xMHB4O1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cbn1cblxuLy8gVGhpcyBpcyBhIENTUyBhcnJvdyB0aGF0IHBvaW50cyBvZmYgYW4gZWxlbWVudFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQG1peGluIHBvaW50ZXItYXJyb3coJHRvcC12YWx1ZSwgJHRleHQsICRib3JkZXItY29sb3IpIHtcblxuICAgIC8vIENTUyBBcnJvdyBQbGVhc2UgZ2VuZXJhdGVkXG5cbiAgICAmOjphZnRlcixcbiAgICAmOjpiZWZvcmUge1xuICAgICAgICBib3JkZXI6IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgaGVpZ2h0OiAwO1xuICAgICAgICBtYXgtaGVpZ2h0OiAwO1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICByaWdodDogMTAwcHg7XG4gICAgICAgIHRvcDogJHRvcC12YWx1ZTtcbiAgICAgICAgd2lkdGg6IDA7XG4gICAgICAgIHotaW5kZXg6IDI7XG4gICAgfVxuXG4gICAgJjo6YWZ0ZXIge1xuICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiAkdGV4dDtcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAxMHB4O1xuICAgICAgICBtYXJnaW4tbGVmdDogLTEwcHg7XG4gICAgICAgIG1hcmdpbi10b3A6IDJweDtcbiAgICB9XG5cbiAgICAmOjpiZWZvcmUge1xuICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiAkYm9yZGVyLWNvbG9yO1xuICAgICAgICBib3JkZXItd2lkdGg6IDExcHg7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAtMTFweDtcbiAgICB9XG5cbn1cblxuXG4vLyBUZXh0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBUcnVuY2F0ZVxuQG1peGluIHRydW5jYXRlICgpIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG59XG5cbi8vIFNpZGUtc2Nyb2xsaW5nIFRydW5jYXRpb25cbkBtaXhpbiBzY3JvbGxpbmctdGV4dCAoJHdpZHRoKSB7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgd2lkdGg6ICR3aWR0aDtcblxuICAgIHNwYW4ge1xuICAgICAgICBtaW4td2lkdGg6ICR3aWR0aDtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xuICAgICAgICB0cmFuc2l0aW9uOiAuNnM7XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgICY6aG92ZXIge1xuICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWChjYWxjKCN7JHdpZHRofSAtIDEwMCUpKTtcbiAgICAgICAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8vIEJhY2tncm91bmQgTm9pc2Vcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEJhY2tncm91bmQgaW1hZ2UgdG8gYWRkIG5vaXNlIHRvIHNvbGlkIGNvbG9yc1xuJW5vaXN5IHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQURJQUFBQXlDQU1BQUFBcDRYaURBQUFBVVZCTVZFV0ZoWVdEZzROM2QzZHRiVzE3ZTN0MWRYV0JnWUdIaDRkNWVYbHpjM09MaTR1Ym01dVZsWldQajQrTmpZMTlmWDJKaVlsL2YzOXJhMnVSa1pHWm1abHBhV21YbDVkdmIyOXhjWEdUazVObloyYzhUVjFtQUFBQUczUlNUbE5BUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUF2RU93dEFBQUZWa2xFUVZSNFhwV1dCNjdjMkJVRmIzZzU1N1QvaFJvOS9XVU1aSGxncjRCZzhaNHFRZ1FKbEhJNEE4U3pGVnJhcHZtVEY5TzdkbVlSRlo2MFlpQmhKUkNnaDFGWWhpTEFtZHZYMEN6VE9wTkU3N01FMFp0eS9uV1d6Y2hEdGlxcm1RRGV1djNwb3dRNXRhMmVOMEZZMElua3FERDczbFQ5YzlsRXp3VU5xZ0ZIczlWUWNlM1RWQ2xGQ1FyU1RmT2lZa1ZKUUJtcGJxMkw2aVphdlBuQVBjb1UwZFN3MFNVVHF6L0d0ckd1WGZieXlCbmlLeWtPV1FXR3F3d01BN1FpWUF4aStJbFBkcW8raFlIblV0NVpQZm5zSEp5TmlEdG5wSnlheU5Ca0Y2Y1dvWUdBTVk5MlUyaFhIRi9DMU04dVAvWnRZZGl1ajI2VWRBZFFRU1hRRXJ3U09NenQvWFdSV0F6NUd1U0JJa3dHMUgzRmFiSjJPc1VPVWhHQzZ0SzRFTXRKTzB0dEM2SUJEM2tNMHZlMHRKd01kU2ZqWm8rRUVJU2FlVHI5UDN3WXJHalhxeUMxa3JjS2RoTXB4RW50NUpldG91bHNjcHl6aFhONUZScHVQSHZiZVFhS3hGQUVCNkVOK2NZTjZ4RDdSWUdwWHBObmRNbVpnTTVEY3MzWVNORkRIVW8yTEdmWnV1a1NXeVVZaXJKQWRZYkYzTWZxRUttak0rSTJFZmhBOTRpRzNMN3VLclIrR2RXRDczeWRsSUIrNmhncmVmMVFUbG1nbWJNMy9MZVg1R0kxVXgxUldwZ3hwTHVaMitJK0lqelo4d3FFNG5pbHZRZGtVZGZoekk1UURXeStrdzVXZ2cycEdwZUVWZUNDQTdiODVCTzNGOUR6eEIzY2RxdkJ6V2NtemJ5TWlxaHp1WXF0SFJWRzJ5NHgrS09sbnlxbGE4QW9XV3B1Qm9ZUnh6WHJmS3VJTGw2U2ZpV0NianhvWkpVYUNCajFDakg3R0lhRGJjOWtxQlkzVy9SZ2pkYTFpcVFjT0p1MldXKzc2cFpDOVFHN00wMGRmZmU5aE5uc2V1cEZMNTNyOEY3WUhTd0pXVUtQMnErazdSZHN4eU9CMTFuMHh0T3ZuVzRpck1NRk5WNEgwdXF3UzVFeHNtUDlBeGJEVGM5SndnbmVBVDV2VGlVU20xRTdCU2ZsU3QzYmZhMXR2OERpM1I4bjNBZjdNTld6czQ5aG1hdUUyd1ArdHRycStBc1dwRkcyYXd2c3VPcWJpcFdIZ3R1dnVhQUUrQTFaLzdnQzloZXNucis3d3FDd0c4YzV5QWczQUwxZm04VDlBWnRwL2JiSkd3bDFwTnJFN1J1T1g3UGVNUlVFUlZhUHBFcyt5cWVvU211T2xva3F3NDlwZ29takxlaDdpY0hObEcxOXlqczZYWE9NZWRZbTV4SDJZeHBWMnRjMFJvMmpKZnhDNTBBcHV4R29iN2xNc3hmVGJlVXYwN1R5WXhwZUx1Y0VIMWdOZDRJS0gyTEFnNVRkVmhsQ2FmWnZwc2tmbmNDZng4cE9oSnpkNzZiSldlWUZuRmNpd2NZZnViUmMxMklwL3BwSWhBMS9tU1ovUnhqRkRySkM1eGlmRmpKcFkyWGw1elhkZ3VGcVl5VFIxelNwMVk5cCt0a3REWVlTTmZsY3hJMGl5TzRUUEJkbFJjcGVxaksvcGlGNWJrbHE3N1ZTRWFBK3o4cW1KVEZ6SVdpaXRibnpSNzk0VVNLQlVhVDBOVEVzVmpacUxhRlZxSm9QTjlPREc3MElQYmZCSEtLKy9xL0FXUjB0SnpZSFJVTE9hNE1QK1cvSGZHYWRaVWJmdzE3N0c3ai9PR2JJczhUYWhMeXlubDRYNFJpbkY3OTNPeitCVTBzYVh0VUhyVkJGVC9EbkEzY3ROUG9HYnM0aFJJalRvazhpK2FsZ1QxbFRIaTRTeEZ2T05LTnJnUUZBcTIvZ0ZuV01YZ3dmZmdZTUpwaUtZa21XM3RUZzNaUTlKcStmOFhOK0E1ZWVVS0hXdkpXSjJzZ0oxU29wK3d3aHFGVmlqcVdhSmh3dEQ4TU5sU0JlV05OV1RhNVo1a1BadzUrTGJWVDk5d3FUZHgyOWxNVUg0T0lHL0Q4NnJ1S0VhdUJqdkg1eHk2dW0vU2ZqN2VpNlVVVms0QUlsM015RDRNU1NUT0ZnU3dzSC9RSldhUTVhczdaY21nQlprempqVTFVclE3NGNpMWdXQkNTR0h0dVYxSDJtaFNuTzNXcC8zZkVWNWErNHd6Ly82cXk4SnhqWnNteHh5NSs0dzlDRE5KWTA5VDA3MmlLRzBFbk9TMGFyRVlnWHFZblhjWUh3alR0VU5BY01lbE9kNHhwa29xaVRZSUNXRnEwSlNpUGZQRFFkbnQrNC93dXFjWFk0N1FJTGJnQUFBQUJKUlU1RXJrSmdnZz09XCIpOyAvLyBzYXNzLWxpbnQ6ZGlzYWJsZS1saW5lIHF1b3Rlc1xufVxuXG4vLyBBUkNISVZFXG4vLyAoVG8gYmUgZGVsZXRlZCBldmVudHVhbGx5KVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQG1peGluIGJ0bi1zb2xpZCgkdGV4dCwgJGJhY2tncm91bmQpIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmFja2dyb3VuZDtcbiAgICBib3JkZXItY29sb3I6IG1peCgkYmxhY2ssICRiYWNrZ3JvdW5kLCAxNSUpO1xuICAgIGNvbG9yOiAkdGV4dDtcbiAgICB0ZXh0LXNoYWRvdzogMCAxcHggMCByZ2JhKCRibGFjaywgMC4zKSwgMCAwIDJweCByZ2JhKCRibGFjaywgMC4yKTtcblxuICAgICY6Zm9jdXMsXG4gICAgJjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IG1peCgkYmxhY2ssICRiYWNrZ3JvdW5kLCAxNSUpO1xuICAgICAgICBib3JkZXItY29sb3I6IG1peCgkYmxhY2ssICRiYWNrZ3JvdW5kLCAzMCUpO1xuICAgICAgICBjb2xvcjogJHRleHQ7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgfVxuXG4gICAgJjphY3RpdmUsXG4gICAgJi5hY3RpdmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtaXgoJGJsYWNrLCAkYmFja2dyb3VuZCwgMzAlKTtcbiAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICB9XG59XG5cbkBtaXhpbiBidG4tb3V0bGluZSgkY29sb3IpIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItY29sb3I6ICRjb2xvcjtcbiAgICBib3gtc2hhZG93OiBub25lO1xuICAgIGNvbG9yOiAkY29sb3I7XG5cbiAgICAmOmZvY3VzLFxuICAgICY6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3I7XG4gICAgICAgIGNvbG9yOiAkd2hpdGU7XG4gICAgfVxuXG4gICAgJjphY3RpdmUsXG4gICAgJi5hY3RpdmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtaXgoJGJsYWNrLCAkY29sb3IsIDMwJSk7XG4gICAgICAgIGJvcmRlci1jb2xvcjogbWl4KCRibGFjaywgJGNvbG9yLCAzMCUpO1xuICAgIH1cbn1cblxuQG1peGluIGJ0bi1yYWlzZWQoJGJhY2tncm91bmQpIHtcbiAgICBib3gtc2hhZG93OiAwIDJweCAwIDAgbWl4KCRibGFjaywgJGJhY2tncm91bmQsIDMwJSk7XG5cbiAgICAmOmZvY3VzLFxuICAgICY6aG92ZXIge1xuICAgICAgICBib3gtc2hhZG93OiAwIDJweCAwIDAgbWl4KCRibGFjaywgJGJhY2tncm91bmQsIDQwJSk7XG4gICAgfVxufVxuIiwiLy8gQnJlYWtwb2ludCB2aWV3cG9ydCBzaXplcyBhbmQgbWVkaWEgcXVlcmllcy5cbi8vXG4vLyBCcmVha3BvaW50cyBhcmUgZGVmaW5lZCBhcyBhIG1hcCBvZiAobmFtZTogbWluaW11bSB3aWR0aCksIG9yZGVyIGZyb20gc21hbGwgdG8gbGFyZ2U6XG4vL1xuLy8gICAgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4KVxuLy9cbi8vIFRoZSBtYXAgZGVmaW5lZCBpbiB0aGUgYCRncmlkLWJyZWFrcG9pbnRzYCBnbG9iYWwgdmFyaWFibGUgaXMgdXNlZCBhcyB0aGUgYCRicmVha3BvaW50c2AgYXJndW1lbnQgYnkgZGVmYXVsdC5cblxuLy8gTmFtZSBvZiB0aGUgbmV4dCBicmVha3BvaW50LCBvciBudWxsIGZvciB0aGUgbGFzdCBicmVha3BvaW50LlxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtbmV4dChzbSlcbi8vICAgIG1kXG4vLyAgICA+PiBicmVha3BvaW50LW5leHQoc20sICh4czogMCwgc206IDU3NnB4LCBtZDogNzY4cHgsIGxnOiA5OTJweCwgeGw6IDEyMDBweCkpXG4vLyAgICBtZFxuLy8gICAgPj4gYnJlYWtwb2ludC1uZXh0KHNtLCAkYnJlYWtwb2ludC1uYW1lczogKHhzIHNtIG1kIGxnIHhsKSlcbi8vICAgIG1kXG5AZnVuY3Rpb24gYnJlYWtwb2ludC1uZXh0KCRuYW1lLCAkYnJlYWtwb2ludHM6ICRncmlkLWJyZWFrcG9pbnRzLCAkYnJlYWtwb2ludC1uYW1lczogbWFwLWtleXMoJGJyZWFrcG9pbnRzKSkge1xuICAkbjogaW5kZXgoJGJyZWFrcG9pbnQtbmFtZXMsICRuYW1lKTtcbiAgQHJldHVybiBpZigkbiA8IGxlbmd0aCgkYnJlYWtwb2ludC1uYW1lcyksIG50aCgkYnJlYWtwb2ludC1uYW1lcywgJG4gKyAxKSwgbnVsbCk7XG59XG5cbi8vIE1pbmltdW0gYnJlYWtwb2ludCB3aWR0aC4gTnVsbCBmb3IgdGhlIHNtYWxsZXN0IChmaXJzdCkgYnJlYWtwb2ludC5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LW1pbihzbSwgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4KSlcbi8vICAgIDU3NnB4XG5AZnVuY3Rpb24gYnJlYWtwb2ludC1taW4oJG5hbWUsICRicmVha3BvaW50czogJGdyaWQtYnJlYWtwb2ludHMpIHtcbiAgJG1pbjogbWFwLWdldCgkYnJlYWtwb2ludHMsICRuYW1lKTtcbiAgQHJldHVybiBpZigkbWluICE9IDAsICRtaW4sIG51bGwpO1xufVxuXG4vLyBNYXhpbXVtIGJyZWFrcG9pbnQgd2lkdGguIE51bGwgZm9yIHRoZSBsYXJnZXN0IChsYXN0KSBicmVha3BvaW50LlxuLy8gVGhlIG1heGltdW0gdmFsdWUgaXMgY2FsY3VsYXRlZCBhcyB0aGUgbWluaW11bSBvZiB0aGUgbmV4dCBvbmUgbGVzcyAwLjAycHhcbi8vIHRvIHdvcmsgYXJvdW5kIHRoZSBsaW1pdGF0aW9ucyBvZiBgbWluLWAgYW5kIGBtYXgtYCBwcmVmaXhlcyBhbmQgdmlld3BvcnRzIHdpdGggZnJhY3Rpb25hbCB3aWR0aHMuXG4vLyBTZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL21lZGlhcXVlcmllcy00LyNtcS1taW4tbWF4XG4vLyBVc2VzIDAuMDJweCByYXRoZXIgdGhhbiAwLjAxcHggdG8gd29yayBhcm91bmQgYSBjdXJyZW50IHJvdW5kaW5nIGJ1ZyBpbiBTYWZhcmkuXG4vLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE3ODI2MVxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtbWF4KHNtLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgpKVxuLy8gICAgNzY3Ljk4cHhcbkBmdW5jdGlvbiBicmVha3BvaW50LW1heCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkZ3JpZC1icmVha3BvaW50cykge1xuICAkbmV4dDogYnJlYWtwb2ludC1uZXh0KCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICBAcmV0dXJuIGlmKCRuZXh0LCBicmVha3BvaW50LW1pbigkbmV4dCwgJGJyZWFrcG9pbnRzKSAtIC4wMnB4LCBudWxsKTtcbn1cblxuLy8gUmV0dXJucyBhIGJsYW5rIHN0cmluZyBpZiBzbWFsbGVzdCBicmVha3BvaW50LCBvdGhlcndpc2UgcmV0dXJucyB0aGUgbmFtZSB3aXRoIGEgZGFzaCBpbmZyb250LlxuLy8gVXNlZnVsIGZvciBtYWtpbmcgcmVzcG9uc2l2ZSB1dGlsaXRpZXMuXG4vL1xuLy8gICAgPj4gYnJlYWtwb2ludC1pbmZpeCh4cywgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4KSlcbi8vICAgIFwiXCIgIChSZXR1cm5zIGEgYmxhbmsgc3RyaW5nKVxuLy8gICAgPj4gYnJlYWtwb2ludC1pbmZpeChzbSwgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4KSlcbi8vICAgIFwiLXNtXCJcbkBmdW5jdGlvbiBicmVha3BvaW50LWluZml4KCRuYW1lLCAkYnJlYWtwb2ludHM6ICRncmlkLWJyZWFrcG9pbnRzKSB7XG4gIEByZXR1cm4gaWYoYnJlYWtwb2ludC1taW4oJG5hbWUsICRicmVha3BvaW50cykgPT0gbnVsbCwgXCJcIiwgXCItI3skbmFtZX1cIik7XG59XG5cbi8vIE1lZGlhIG9mIGF0IGxlYXN0IHRoZSBtaW5pbXVtIGJyZWFrcG9pbnQgd2lkdGguIE5vIHF1ZXJ5IGZvciB0aGUgc21hbGxlc3QgYnJlYWtwb2ludC5cbi8vIE1ha2VzIHRoZSBAY29udGVudCBhcHBseSB0byB0aGUgZ2l2ZW4gYnJlYWtwb2ludCBhbmQgd2lkZXIuXG5AbWl4aW4gbWVkaWEtYnJlYWtwb2ludC11cCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkZ3JpZC1icmVha3BvaW50cykge1xuICAkbWluOiBicmVha3BvaW50LW1pbigkbmFtZSwgJGJyZWFrcG9pbnRzKTtcbiAgQGlmICRtaW4ge1xuICAgIEBtZWRpYSAobWluLXdpZHRoOiAkbWluKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vIE1lZGlhIG9mIGF0IG1vc3QgdGhlIG1heGltdW0gYnJlYWtwb2ludCB3aWR0aC4gTm8gcXVlcnkgZm9yIHRoZSBsYXJnZXN0IGJyZWFrcG9pbnQuXG4vLyBNYWtlcyB0aGUgQGNvbnRlbnQgYXBwbHkgdG8gdGhlIGdpdmVuIGJyZWFrcG9pbnQgYW5kIG5hcnJvd2VyLlxuQG1peGluIG1lZGlhLWJyZWFrcG9pbnQtZG93bigkbmFtZSwgJGJyZWFrcG9pbnRzOiAkZ3JpZC1icmVha3BvaW50cykge1xuICAkbWF4OiBicmVha3BvaW50LW1heCgkbmFtZSwgJGJyZWFrcG9pbnRzKTtcbiAgQGlmICRtYXgge1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbWF4KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vIE1lZGlhIHRoYXQgc3BhbnMgbXVsdGlwbGUgYnJlYWtwb2ludCB3aWR0aHMuXG4vLyBNYWtlcyB0aGUgQGNvbnRlbnQgYXBwbHkgYmV0d2VlbiB0aGUgbWluIGFuZCBtYXggYnJlYWtwb2ludHNcbkBtaXhpbiBtZWRpYS1icmVha3BvaW50LWJldHdlZW4oJGxvd2VyLCAkdXBwZXIsICRicmVha3BvaW50czogJGdyaWQtYnJlYWtwb2ludHMpIHtcbiAgJG1pbjogYnJlYWtwb2ludC1taW4oJGxvd2VyLCAkYnJlYWtwb2ludHMpO1xuICAkbWF4OiBicmVha3BvaW50LW1heCgkdXBwZXIsICRicmVha3BvaW50cyk7XG5cbiAgQGlmICRtaW4gIT0gbnVsbCBhbmQgJG1heCAhPSBudWxsIHtcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogJG1pbikgYW5kIChtYXgtd2lkdGg6ICRtYXgpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkbWF4ID09IG51bGwge1xuICAgIEBpbmNsdWRlIG1lZGlhLWJyZWFrcG9pbnQtdXAoJGxvd2VyLCAkYnJlYWtwb2ludHMpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkbWluID09IG51bGwge1xuICAgIEBpbmNsdWRlIG1lZGlhLWJyZWFrcG9pbnQtZG93bigkdXBwZXIsICRicmVha3BvaW50cykge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59XG5cbi8vIE1lZGlhIGJldHdlZW4gdGhlIGJyZWFrcG9pbnQncyBtaW5pbXVtIGFuZCBtYXhpbXVtIHdpZHRocy5cbi8vIE5vIG1pbmltdW0gZm9yIHRoZSBzbWFsbGVzdCBicmVha3BvaW50LCBhbmQgbm8gbWF4aW11bSBmb3IgdGhlIGxhcmdlc3Qgb25lLlxuLy8gTWFrZXMgdGhlIEBjb250ZW50IGFwcGx5IG9ubHkgdG8gdGhlIGdpdmVuIGJyZWFrcG9pbnQsIG5vdCB2aWV3cG9ydHMgYW55IHdpZGVyIG9yIG5hcnJvd2VyLlxuQG1peGluIG1lZGlhLWJyZWFrcG9pbnQtb25seSgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkZ3JpZC1icmVha3BvaW50cykge1xuICAkbWluOiBicmVha3BvaW50LW1pbigkbmFtZSwgJGJyZWFrcG9pbnRzKTtcbiAgJG1heDogYnJlYWtwb2ludC1tYXgoJG5hbWUsICRicmVha3BvaW50cyk7XG5cbiAgQGlmICRtaW4gIT0gbnVsbCBhbmQgJG1heCAhPSBudWxsIHtcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogJG1pbikgYW5kIChtYXgtd2lkdGg6ICRtYXgpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkbWF4ID09IG51bGwge1xuICAgIEBpbmNsdWRlIG1lZGlhLWJyZWFrcG9pbnQtdXAoJG5hbWUsICRicmVha3BvaW50cykge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRtaW4gPT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC1kb3duKCRuYW1lLCAkYnJlYWtwb2ludHMpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuIl19 */
