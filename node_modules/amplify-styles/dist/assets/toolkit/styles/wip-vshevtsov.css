@charset "UTF-8";.amplify-dropdown{position:relative}.amplify-dropdown label{font-family:benton-sans-bold;color:#464646;display:block;margin:10px 0 0 5px}.amplify-dropdown>button{font-family:benton-sans-medium;height:63px;overflow:hidden;padding-right:1.875em;position:relative;text-align:left;text-overflow:ellipsis;width:350px}.btn{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;vertical-align:middle;cursor:pointer;background-image:none;border:1px solid transparent;white-space:nowrap;padding:6px 12px;font-size:16px;line-height:1.42857;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none}.amplify-dropdown>button:after{top:50%;transform:translateY(-50%);content:“”;display:block;height:2.1875em;position:absolute;right:3px;text-align:left;width:2.1875em}.amplify-dropdown.show .dropdown-menu{display:block}.amplify-dropdown .dropdown-menu{background:#fff;border:1px solid #eee;display:none;font-family:benton-sans-book;margin-top:0;position:absolute;width:350px;z-index:2;font-size:16px;max-width:23.33333em;padding:.75em 0;overflow:visible;max-height:calc(100vh - 450px);overflow-y:scroll}.amplify-dropdown .dropdown-menu .dropdown-item{-ms-flex-align:center;align-items:center;color:#000;cursor:pointer;display:-ms-flexbox;display:flex;line-height:20px;min-height:40px;padding:.375em 1.33333em;white-space:normal}.summary-feature-report.class-performance{box-shadow:0 1px 3px rgba(0,0,0,.14),0 1px 2px rgba(0,0,0,.24);background:#fff;border-radius:0 0 .5em .5em;font-size:1rem;left:0;margin:2.5em auto;overflow:hidden;padding:0 1.875em .9375em;position:relative;width:100%}@media (min-width:768px){.summary-feature-report.class-performance{width:100%}}@media (min-width:992px){.summary-feature-report.class-performance{font-size:1.0625rem;width:80%}}@media (min-width:1200px){.summary-feature-report.class-performance{font-size:1.25rem}}.summary-feature-report.class-performance .row{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-wrap:wrap;flex-wrap:wrap;text-align:center}.summary-feature-report.class-performance .row:first-child{-ms-flex-align:start;align-items:flex-start;color:#3b5250;font-family:benton-sans;font-weight:400;line-height:1.125em;margin-bottom:.3125em;margin-top:1.25em}.summary-feature-report.class-performance .row:first-child div{padding:.9375em .3125em}.summary-feature-report.class-performance .row:first-child div:before{top:20px}.summary-feature-report.class-performance .row:nth-child(1) div:first-child{-ms-flex-preferred-size:25%;flex-basis:25%}.summary-feature-report.class-performance .row:nth-child(2){background:#faebeb}.summary-feature-report.class-performance .row:nth-child(2) div:first-child{padding:2.625em 0 1.5625em 4.875em;-ms-flex-preferred-size:25%;flex-basis:25%;font-size:.75em;text-align:start}@media screen and (max-width:1350px){.summary-feature-report.class-performance .row:nth-child(2) div:first-child{padding:2.625em 0 1.5625em 3.6875em}}@media screen and (max-width:1350px) and (max-width:992px){.summary-feature-report.class-performance .row:nth-child(2) div:first-child{padding:2.625em 0 1.5625em 3.25em}}.summary-feature-report.class-performance .row:nth-child(3){background:#fbf8da}.summary-feature-report.class-performance .row:nth-child(3) div:first-child{padding:2.625em 0 1.5625em 4.875em;-ms-flex-preferred-size:25%;flex-basis:25%;font-size:.75em;text-align:start}@media screen and (max-width:1350px){.summary-feature-report.class-performance .row:nth-child(3) div:first-child{padding:2.625em 0 1.5625em 3.6875em}}@media screen and (max-width:1350px) and (max-width:992px){.summary-feature-report.class-performance .row:nth-child(3) div:first-child{padding:2.625em 0 1.5625em 3.25em}}.summary-feature-report.class-performance .row:nth-child(4){background:#eff8f4;overflow:hidden}.summary-feature-report.class-performance .row:nth-child(4) div:first-child{padding:2.625em 0 1.5625em 4.875em;-ms-flex-preferred-size:25%;flex-basis:25%;font-size:.75em;text-align:start}@media screen and (max-width:1350px){.summary-feature-report.class-performance .row:nth-child(4) div:first-child{padding:2.625em 0 1.5625em 3.6875em}}@media screen and (max-width:1350px) and (max-width:992px){.summary-feature-report.class-performance .row:nth-child(4) div:first-child{padding:2.625em 0 1.5625em 3.25em}}.summary-feature-report.class-performance .row div{-ms-flex-align:center;align-items:center;-ms-flex-preferred-size:25%;flex-basis:25%;font-size:.875em;padding:1.25em 0;position:relative}@media screen and (max-width:992px){.summary-feature-report.class-performance .row div{-ms-flex-preferred-size:25%;flex-basis:25%}}.summary-feature-report.class-performance .row div:before{background:#ccc;left:0;content:'';display:block;height:115%;top:0;width:1px;position:absolute}.summary-feature-report.class-performance .row div:first-child:before,.summary-feature-report.class-performance .row div:nth-child(2):before{background:0 0}.summary-feature-report.class-performance .row div span{display:block;font-size:1.5em;margin-bottom:.3125em;color:#3b5250}.summary-feature-report.class-performance .row div span.line{border-bottom:2px solid #4e4e50;width:5%;margin:0 auto;opacity:.5;height:50%}.summary-feature-report.class-performance .row div.square{display:inline-block;width:14px;height:14px;border:2px solid #000;padding:0!important;float:left;position:absolute;top:50%;left:2.8125em;margin-top:-7px;opacity:.6}.summary-feature-report.class-performance .row div.square.gradient{background:linear-gradient(-45deg,#000 50%,#fbf8da 50%)}.summary-feature-report.class-performance .row div.square.black{background:#000}.summary-feature-report.class-performance .header-row div:nth-child(4){opacity:.5}.summary-feature-report.class-performance .bottom-row{margin-top:18px}.summary-feature-report.class-performance .bottom-row div{display:inline-block;margin-right:1.25em;font-size:.875em}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
